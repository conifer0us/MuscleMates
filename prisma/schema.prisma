generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../build/active.db"
}

model Cookie {
  id        Int    @id @default(autoincrement())
  username  String
  cookieval String @unique
  user      User   @relation("cookies", fields: [username], references: [username])
}

model Friends {
  id              Int    @id @default(autoincrement())
  friend          User   @relation("friend", fields: [friendName], references: [username])
  friendName      String
  friendAdded     User   @relation("friendAdded", fields: [friendAddedName], references: [username])
  friendAddedName String
  messages        Messages[] @relation("friendset")
  @@unique([friendAddedName, friendName])
}

model Messages {
  id              Int @id @default(autoincrement())
  friendset       Friends @relation("friendset", fields: [friendid], references: [id], onDelete: Cascade)
  friendid        Int
  sender          User @relation("sender", fields: [senderName], references: [username])
  senderName      String
  receiver        User @relation("receiver", fields: [receiverName], references: [username])
  receiverName    String
  timesent        DateTime @default(now())
  data            String
}

model MatchRequest {
  id           Int    @id @default(autoincrement())
  sender       User   @relation("sender", fields: [senderName], references: [username], onUpdate: NoAction)
  senderName   String
  receiver     User   @relation("receiver", fields: [receiverName], references: [username], onUpdate: NoAction)
  receiverName String
  @@unique([senderName, receiverName])
}

model Profile {
  id       Int     @id @default(autoincrement())
  username String  @unique
  name     String?
  age      String?
  bio      String?
  gym      String?
  gender   String?
  pronouns String?
  user     User    @relation("userProfile", fields: [username], references: [username], onDelete: Cascade)
}

model Preferences {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  schedule       String?
  workoutTypes   String?
  filterByGender Boolean?
  filterByGym    Boolean?
  user           User     @relation("userPreferences", fields: [username], references: [username], onDelete: Cascade)
}

model User {
  id                      Int           @id @default(autoincrement())
  username                String       @unique
  useremail               String?       @unique
  passwordhash            String?
  profile                 Profile? @relation("userProfile")
  preferences             Preferences? @relation("userPreferences")
  friends                 Friends[] @relation("friend")
  friendsAdded            Friends[] @relation("friendAdded")            
  cookies                 Cookie[] @relation("cookies")
  requestsSent            MatchRequest[] @relation("sender")
  requestsReceived        MatchRequest[] @relation("receiver")
  messagesSent            Messages[] @relation("sender")
  messagesReceived        Messages[] @relation("receiver")
}
